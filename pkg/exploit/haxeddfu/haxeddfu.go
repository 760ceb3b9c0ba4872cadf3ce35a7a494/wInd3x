package haxeddfu

import (
	"fmt"
	"log"
	"unicode/utf16"

	"github.com/google/gousb"

	"github.com/freemyipod/wInd3x/pkg/dfu"
	"github.com/freemyipod/wInd3x/pkg/exploit"
	"github.com/freemyipod/wInd3x/pkg/uasm"
)

const ProductString = "haxed dfu"

func makeStringDescriptor(s string) []byte {
	descriptor := []byte{
		0, 0x03,
	}
	for _, cp := range utf16.Encode([]rune(s)) {
		descriptor = append(descriptor, uint8(cp&0xff), uint8(cp>>8))
	}
	descriptor[0] = uint8(len(descriptor))
	return descriptor
}

func Payload(ep *exploit.Parameters) ([]byte, error) {
	if ep.HaxedDFUPayload == nil {
		return nil, fmt.Errorf("not implemented")
	}
	descriptor := makeStringDescriptor(ProductString)

	insns := ep.DisableICache
	insns = append(insns, ep.HaxedDFUPayload...)
	insns = append(insns, ep.HandlerFooter...)
	insns = append(insns,
		uasm.Label("descriptor"),
		uasm.Embed(descriptor),
	)
	payload := uasm.Program{
		Address: ep.ExecAddr,
		Listing: insns,
	}

	return payload.Assemble(), nil
}

func Trigger(usb *gousb.Device, ep *exploit.Parameters, force bool) error {
	p, err := usb.GetStringDescriptor(2)
	if err != nil {
		return fmt.Errorf("retrieving string descriptor: %v", err)
	}
	if want, got := ProductString, p; want == got {
		if force {
			log.Printf("Device already running haxed DFU, but forcing re-upload")
		} else {
			log.Printf("Device already running haxed DFU")
			return nil
		}
	}
	log.Printf("Generating payload...")

	payload, err := Payload(ep)
	if err != nil {
		return fmt.Errorf("failed to generate payload: %w", err)
	}

	if err := dfu.Clean(usb); err != nil {
		return fmt.Errorf("clean failed: %w", err)
	}
	log.Printf("Running rce....")
	if err := exploit.RCE(usb, ep, payload, nil); err != nil {
		return fmt.Errorf("failed to execute haxed dfu payload: %w", err)
	}

	// Check descriptor got changed.
	p, err = usb.GetStringDescriptor(2)
	if err != nil {
		return fmt.Errorf("retrieving string descriptor: %v", err)
	}
	if want, got := ProductString, p; want != got {
		return fmt.Errorf("string descriptor got unexpected result, wanted %q, got %q", want, got)
	}
	log.Printf("Haxed DFU running!")

	return nil

}
